// src/styles/uswds-application-ui/_custom-spacing-utilities.scss
@use "sass:map";
@use "sass:list";
@use "sass:math"; // For math.div

// --- Configuration for Custom Spacing Utilities ---

// Base unit for consistent rem conversion (assuming root font-size of 16px)
$custom-spacing-root-font-size: 16px !default;

// The custom 4-point spacing scale.
// Keys are suffixes, values are the desired *pixel* values.
// These will be converted to rems.
$custom-spacing-px-scale: (
  "0":    0,
  "1px":  1,    // 1px
  "05":   2,    // 2px (0.5 * 4px base)
  "1":    4,    // 4px (1 * 4px base)
  "5px":  5,    // 5px
  "105":  6,    // 6px (1.5 * 4px base)
  "2":    8,    // 8px (2 * 4px base)
  "205":  10,   // 10px (2.5 * 4px base)
  "3":    12,   // 12px
  "4":    16,   // 16px
  "5":    20,   // 20px
  "6":    24,   // 24px
  "7":    28,   // 28px
  "8":    32,   // 32px
  "9":    36,   // 36px
  "10":   40,   // 40px
  "11":   44,
  "12":   48,
  "14":   56,
  "16":   64,
  "20":   80,
  "24":   96,
  "28":   112,
  "32":   128,
  "36":   144,
  "40":   160,
  "48":   192
);

// Suffixes from the scale for which to generate utilities.
$custom-spacing-generate-suffixes: map.keys($custom-spacing-px-scale);

// CSS properties and their 'ui-' prefixed class segments
$custom-spacing-properties: (
  "padding": "p",
  "padding-top": "pt",
  "padding-right": "pr",
  "padding-bottom": "pb",
  "padding-left": "pl",
  "padding-x": ("pl", "pr"),
  "padding-y": ("pt", "pb"),
  "margin": "m",
  "margin-top": "mt",
  "margin-right": "mr",
  "margin-bottom": "mb",
  "margin-left": "ml",
  "margin-x": ("ml", "mr"),
  "margin-y": ("mt", "mb"),
  "gap": "gap",
  "row-gap": "row-gap",
  "column-gap": "col-gap"
);

// --- Utility Generation Loop ---

@function px-to-rem($pixels, $root-font-size-px: $custom-spacing-root-font-size) {
  // Ensure $root-font-size-px is a pixel value, then strip its unit for calculation
  $root-numeric: 0;
  @if unit($root-font-size-px) == "px" {
    $root-numeric: math.div($root-font-size-px, 1px); // Get unitless number
  } @else if unitless($root-font-size-px) {
    $root-numeric: $root-font-size-px; // Already unitless
  } @else {
    @error "Root font size for px-to-rem must be in px or unitless. Got #{$root-font-size-px}.";
  }

  @if unitless($pixels) { // If $pixels is unitless, assume it's a px value
    @if $pixels == 0 {
      @return 0rem;
    }
    @return math.div($pixels, $root-numeric) * 1rem;
  } @else if unit($pixels) == "px" { // If $pixels is in px
    @if $pixels == 0px {
      @return 0rem;
    }
    // Divide the numeric part of $pixels by $root-numeric
    @return math.div(math.div($pixels, 1px), $root-numeric) * 1rem;
  } @else {
    @error "Value to convert must be in px or unitless. Got #{$pixels}.";
  }
}

@mixin generate-custom-ui-spacing-utilities {
  @each $css_property_key, $value_unused in $custom-spacing-properties {
    // $css_property_key will be like "padding", "padding-left", "padding-x", "margin-x", "gap"
    // $value_unused (original value from $custom-spacing-properties like "p", ("pl", "pr")) is not directly used for class naming here.

    @each $suffix_key in $custom-spacing-generate-suffixes {
      $pixel_value: map.get($custom-spacing-px-scale, $suffix_key);
      $rem_value: px-to-rem($pixel_value);

      // New class naming convention: ui-[property_key]-[suffix_key]
      // e.g., ui-padding-1, ui-padding-left-1px, ui-margin-x-4, ui-gap-2
      $class_name: "ui-#{$css_property_key}-#{$suffix_key}";

      .#{$class_name} {
        @if $css_property_key == "padding-x" {
          padding-left: #{$rem_value} !important;
          padding-right: #{$rem_value} !important;
        } @else if $css_property_key == "padding-y" {
          padding-top: #{$rem_value} !important;
          padding-bottom: #{$rem_value} !important;
        } @else if $css_property_key == "margin-x" {
          margin-left: #{$rem_value} !important;
          margin-right: #{$rem_value} !important;
        } @else if $css_property_key == "margin-y" {
          margin-top: #{$rem_value} !important;
          margin-bottom: #{$rem_value} !important;
        } @else {
          // Handles direct properties like "padding", "padding-left", "margin-top", "gap", "row-gap", "column-gap"
          #{$css_property_key}: #{$rem_value} !important;
        }
      }
    }
  }
}

@include generate-custom-ui-spacing-utilities;

// --- Cascade Debug Test ---
.cascade-debug-test {
  color: hotpink !important;
  border: 1px solid lime !important;
}

