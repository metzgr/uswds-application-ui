// src/styles/uswds-application-ui/_ui-spacing.scss
@use "sass:map";
@use "sass:list";
@use "sass:string";
@use "sass:math";
@use "./settings" as s;
@use "uswds"; // Added for USWDS functions and mixins

// --- Configuration for Custom UI Spacing Utilities ---
$base-font-size-px: 16; // Standard base font size in pixels. Used as default for px-to-rem.

// Function to convert pixel values to rem, ensuring unitless input for calculations
@function px-to-rem($px-value, $current-base-font-size-px: $base-font-size-px) {
  // Remove units if present
  $px-value-unitless: if(unitless($px-value), $px-value, $px-value / ($px-value * 0 + 1));
  $current-base-font-size-px-unitless: if(unitless($current-base-font-size-px), $current-base-font-size-px, $current-base-font-size-px / ($current-base-font-size-px * 0 + 1));

  @if $current-base-font-size-px-unitless == 0 {
    @error "Base font size cannot be zero.";
  }
  @return math.div($px-value-unitless, $current-base-font-size-px-unitless) * 1rem;
}

// Custom absolute value function
@function abs($number) {
  @if $number < 0 {
    @return -$number;
  }
  @return $number;
}

// Custom pixel-based spacing scale. Values are in pixels.
$custom-spacing-px-scale: (
  "0":    0,
  "1px":  1,
  "05":   2,    // e.g., 2px
  "1":    4,    // e.g., 4px
  "2":    8,
  "3":    12,
  "4":    16,
  "5":    20,
  "6":    24,
  "7":    28,
  "8":    32,
  "9":    36,
  "10":   40,
  // Negative values for margins
  "neg-05": -2,
  "neg-1":  -4,
  "neg-2":  -8,
  "neg-3":  -12,
  "neg-4":  -16,
  "neg-5":  -20,
  "neg-6":  -24,
  "neg-7":  -28,
  "neg-8":  -32,
  "neg-9":  -36,
  "neg-10": -40
);

// Define which properties to generate utilities for
$custom-spacing-properties: (
  padding: (
    property: "padding",
    sides: (
      "": "", // All sides
      "-top": "-top",
      "-bottom": "-bottom",
      "-left": "-left",
      "-right": "-right",
      "-x": "-left" "-right",
      "-y": "-top" "-bottom"
    )
  ),
  margin: (
    property: "margin",
    sides: (
      "": "", // All sides
      "-top": "-top",
      "-bottom": "-bottom",
      "-left": "-left",
      "-right": "-right",
      "-x": "-left" "-right",
      "-y": "-top" "-bottom"
    )
  ),
  gap: (
    property: "gap",
    isSimple: true // Indicates no sides, direct property-value
  ),
  "gap-x": (
    property: "column-gap",
    isSimple: true
  ),
  "gap-y": (
    property: "row-gap",
    isSimple: true
  )
);

// --- Helper Mixin for Rule Generation ---
@mixin _generate-spacing-rules-for-scale($util-prefix, $prop-config, $scale-key, $scale-val-px, $is-base-pass: true) {
  $base-property: map.get($prop-config, "property");
  $is-simple-prop: map.get($prop-config, "isSimple");
  $is-negative-value: $scale-val-px < 0;

  @if $is-negative-value and ($util-prefix == "padding" or string.index($util-prefix, "gap")) {
    // Skip negative padding and negative gap
  } @else {
    $rem-value: null;
    @if $is-negative-value {
      $rem-value: calc(#{px-to-rem(abs($scale-val-px))} * -1);
    } @else {
      $rem-value: px-to-rem($scale-val-px);
    }

    @if $is-base-pass == true {
      // Default (mobile-first) classes
      @if $is-simple-prop {
        .ui-#{$util-prefix}-#{$scale-key} {
          #{$base-property}: #{$rem-value} !important;
        }
      } @else {
        $sides-map: map.get($prop-config, "sides");
        @each $side-key, $side-props in $sides-map {
          .ui-#{$util-prefix}#{$side-key}-#{$scale-key} {
            @if type-of($side-props) == "list" {
              @each $side-prop-item in $side-props {
                #{$base-property}#{$side-prop-item}: #{$rem-value} !important;
              }
            } @else {
              #{$base-property}#{$side-props}: #{$rem-value} !important;
            }
          }
        }
      }
    } @else {
      // Responsive classes using custom breakpoints
      @each $bp-key in s.$custom-ui-utility-breakpoint-keys {
        @media (min-width: #{map.get(s.$custom-ui-breakpoints, $bp-key)}) {
          $responsive-class-prefix: map.get(s.$custom-ui-breakpoint-prefix-map, $bp-key);
          @if $is-simple-prop {
            .#{$responsive-class-prefix}ui-#{$util-prefix}-#{$scale-key} {
              #{$base-property}: #{$rem-value} !important;
            }
          } @else {
            $sides-map: map.get($prop-config, "sides");
            @each $side-key, $side-props in $sides-map {
              .#{$responsive-class-prefix}ui-#{$util-prefix}#{$side-key}-#{$scale-key} {
                @if type-of($side-props) == "list" {
                  @each $side-prop-item in $side-props {
                    #{$base-property}#{$side-prop-item}: #{$rem-value} !important;
                  }
                } @else {
                  #{$base-property}#{$side-props}: #{$rem-value} !important;
                }
              }
            }
          }
        }
      }
    }
  }
}

// --- Mixin to Generate Custom UI Spacing BASE Utilities ---
@mixin generate-custom-ui-spacing-base-utilities {
  @each $util-prefix, $prop-config in $custom-spacing-properties {
    @each $scale-key, $scale-val-px in $custom-spacing-px-scale {
      @include _generate-spacing-rules-for-scale($util-prefix, $prop-config, $scale-key, $scale-val-px, true);
    }
  }
}

// --- Mixin to Generate Custom UI Spacing RESPONSIVE Utilities ---
@mixin generate-custom-ui-spacing-responsive-utilities {
  @each $util-prefix, $prop-config in $custom-spacing-properties {
    @each $scale-key, $scale-val-px in $custom-spacing-px-scale {
      @include _generate-spacing-rules-for-scale($util-prefix, $prop-config, $scale-key, $scale-val-px, false);
    }
  }
}

// REMOVED: @include generate-custom-ui-spacing-utilities; (This line is intentionally removed)

